EasyScrobble: A stupidly easy Last.fm scrobbler for iOS or Mac OS X apps
Copyright (C) 2012 Adam Drew, AmStaff Apps adam@amstaffapps.com

== About EasyScrobble ==

I wanted a way to quickly and easily send scrobble data to Last.fm from 
my iOS app. There are other Last.fm scrobbling kits out there, and all of 
them are richer and more elegant than EasyScrobble, but all the ones I found 
were either:

1. Difficult to use
2. Not coded for ARC

I needed something really easy and that used ARC. EasyScrobble was what I
wrote to solve the problem. 

EasyScrobble is open source software provided under an MIT license. See LICENSE 
for more information.

== What EasyScrobble Does ==

EasyScrobble is not a complete Last.fm API wrapper. All you can do with 
EasyScrobble is:

1. Authenticate to Last.FM
2. Post tracks for scrobbling
3. "Love" a track

EasyScrobble wont get track metadata, or pull down artwork, or do any of the 
rich social stuff Last.fm offers. All I needed to do was scrobble and like so 
that's all EasyScrobble does. It's limited BUT if that's all you need to do 
EasyScrobble is a lot easier than the other kits I found out there.

EasyScrobble is inelegant, but I was willing to accept ugliness if it meant ease 
of use (i.e. synchronous operation, no callbacks, etc.) 

== How To Use EasyScrobble ==

EasyScrobble is designed to be really easy to use.

Get Set Up:
1. Add LPEasyScrobble.m and LPEasyScrobble.h into your Xcode project (drag and drop)
2. Link your Xcode project to Security.framework
3. Edit LPEasyScrobble.m and enter your Last.fm developer credentials here:
    [self setAPIKey:@""];
    [self setAPISecret:@""];
4. Import LPEasyScrobble.h into whatever class you want to use it in
	#import "LPEasyScrobble.h"

Use EasyScrobble In Your Code:
	//Create an EasyScrobble instance
	LPEasyScrobble *easyScrobble = [LPEasyScrobble new];
	
	//Authenticate a user
	BOOL retVal = [easyScrobble setUsername:@"someUserName" andPassword:@"somePassword"];
	
	//Scrobble an MPMediaItem
	MPMediaItem *nowPlayingItem = [[MPMusicPlayerController iPodMusicPlayer] 
						nowPlayingItem];
	BOOL retVal = [easyScrobble scrobbleTrack:nowPlayingItem];
	
	//"Love" an MPMediaItem
	MPMediaItem *nowPlayingItem = [[MPMusicPlayerController iPodMusicPlayer] 
						nowPlayingItem];
	BOOL retVal = [easyScrobble loveTrack:nowPlayingItem];

== Usage Notes ==

Be UI Thread Considerate:
EasyScrobble is synchronous. Doing sync net I/O on the main thread is a no-no so I
advise wrapping EasyScrobble in a GDC block. Example:

    dispatch_queue_t queue = 
	dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0ul);
    	dispatch_async(queue, ^{
       		 BOOL retVal = [easyScrobble scrobbleTrack:[self.musicPlayer nowPlayingItem]];
    });

Debug Mode:
By default debug mode is OFF. In debug mode various important bits of data will be
logged out to the console when using EasyScrobble. This will help you should you
run into problem (example, use the debug output to check a POST with curl). 

If you are having trouble with EasyScrobble try turning debug mode on and seeing 
what shows up on the console. Edit this line in EasyScrobble.m:

    [self setIsInDebug:TRUE];
    
Callbacks:
All EasyScrobble methods return a BOOL. The BOOL will tell you whether the call 
succeeded or failed. Combining this with GDC can let you simulate callbacks but
in a block-based and very simple way:

    dispatch_queue_t queue = 
	dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0ul);
    	dispatch_async(queue, ^{
       		 BOOL retVal = [easyScrobble scrobbleTrack:[self.musicPlayer nowPlayingItem]];
       		  dispatch_sync(dispatch_get_main_queue(), ^{
       		  		if ( retVal == TRUE ) {
       		  			//Take action on success
       		  		}
       		  		if ( retVal == FALSE ) {
       		  			//Take action on failure
       		  		}       		  
       		  });
    });






